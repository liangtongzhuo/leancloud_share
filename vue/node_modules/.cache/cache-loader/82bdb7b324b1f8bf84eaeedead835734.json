{"remainingRequest":"/Users/ltz/Desktop/leancloud_share/vue/node_modules/babel-loader/lib/index.js!/Users/ltz/Desktop/leancloud_share/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ltz/Desktop/leancloud_share/vue/src/components/Base.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/ltz/Desktop/leancloud_share/vue/src/components/Base.vue","mtime":1591344754525},{"path":"/Users/ltz/Desktop/leancloud_share/vue/package.json","mtime":1591171759513},{"path":"/Users/ltz/Desktop/leancloud_share/vue/node_modules/cache-loader/dist/cjs.js","mtime":1591171751870},{"path":"/Users/ltz/Desktop/leancloud_share/vue/node_modules/babel-loader/lib/index.js","mtime":1591171751654},{"path":"/Users/ltz/Desktop/leancloud_share/vue/node_modules/vue-loader/lib/index.js","mtime":1591171758959}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ltz/Desktop/leancloud_share/vue/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport \"core-js/modules/es6.promise\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport AV from 'leancloud-storage';\nexport default {\n  name: 'Base',\n  data: function data() {\n    return {\n      animes: []\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.getAnime();\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function mounted() {\n      return _mounted.apply(this, arguments);\n    };\n  }(),\n  methods: {\n    getAnime: function () {\n      var _getAnime = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var query;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                query = new AV.Query('Anime');\n                query.include(['peopleArr']);\n                query.ascending('createdAt');\n                _context2.prev = 3;\n                _context2.next = 6;\n                return query.find();\n\n              case 6:\n                this.animes = _context2.sent;\n                _context2.next = 12;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                alert(_context2.t0);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      return function getAnime() {\n        return _getAnime.apply(this, arguments);\n      };\n    }(),\n    // 添加数据\n    saveAnime: function () {\n      var _saveAnime = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var Anime, anime, title, age;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                Anime = AV.Object.extend('Anime');\n                anime = new Anime();\n                title = prompt('动漫名字？', '');\n                age = prompt('观看年龄？', '');\n                anime.set('title', title);\n                anime.set('age', age);\n                _context3.next = 8;\n                return anime.save();\n\n              case 8:\n                // 更新页面\n                this.getAnime();\n                alert('保存成功');\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function saveAnime() {\n        return _saveAnime.apply(this, arguments);\n      };\n    }(),\n    updateAnime: function () {\n      var _updateAnime = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(anime) {\n        var title, age;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                title = prompt('动漫名字？', '');\n                age = prompt('几岁看的？', '');\n                anime.set('title', title);\n                anime.set('age', age);\n                _context4.prev = 4;\n                _context4.next = 7;\n                return anime.save();\n\n              case 7:\n                this.getAnime();\n                alert('保存成功');\n                _context4.next = 14;\n                break;\n\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](4);\n                alert(_context4.t0);\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[4, 11]]);\n      }));\n\n      return function updateAnime(_x) {\n        return _updateAnime.apply(this, arguments);\n      };\n    }(),\n    removeAnime: function () {\n      var _removeAnime = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(anime) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (confirm('确定要删除吗？')) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                _context5.prev = 2;\n                _context5.next = 5;\n                return anime.destroy();\n\n              case 5:\n                this.getAnime();\n                _context5.next = 11;\n                break;\n\n              case 8:\n                _context5.prev = 8;\n                _context5.t0 = _context5[\"catch\"](2);\n                alert(_context5.t0);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 8]]);\n      }));\n\n      return function removeAnime(_x2) {\n        return _removeAnime.apply(this, arguments);\n      };\n    }(),\n    addPeople: function () {\n      var _addPeople = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(anime) {\n        var People, people, name;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                People = AV.Object.extend('People');\n                people = new People();\n                name = prompt('人物名字？', '');\n                people.set('name', name);\n                people.set('anime', anime);\n                _context6.prev = 5;\n                _context6.next = 8;\n                return people.save();\n\n              case 8:\n                _context6.next = 13;\n                break;\n\n              case 10:\n                _context6.prev = 10;\n                _context6.t0 = _context6[\"catch\"](5);\n                alert(_context6.t0);\n\n              case 13:\n                _context6.prev = 13;\n                anime.add('peopleArr', people);\n                _context6.next = 17;\n                return anime.save();\n\n              case 17:\n                this.getAnime();\n                _context6.next = 23;\n                break;\n\n              case 20:\n                _context6.prev = 20;\n                _context6.t1 = _context6[\"catch\"](13);\n                alert(_context6.t1);\n\n              case 23:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[5, 10], [13, 20]]);\n      }));\n\n      return function addPeople(_x3) {\n        return _addPeople.apply(this, arguments);\n      };\n    }()\n  }\n};",{"version":3,"sources":["Base.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAEA;QAEA;wBACA;;cAEA,AACA;AAFA;AAGA;AACA;AAPA;;;;;;;mBAQA,AACA;;;;;;;;;;;;;;;AAEA;AADA;;;;;;;;qCAEA;+BACA;gCACA,AACA;;;6BACA,AACA;;;;;;;;;;AACA,AACA,AACA;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;yCACA;4BACA;wCACA;sCACA;mCACA;iCACA;;6BACA;;;AACA;qBACA;sBACA,AACA;;;;;;;;;;;;;;;;;gDACA;;;;;;wCACA;sCACA;mCACA;iCACA,AACA;;;6BACA;;;qBACA;sBACA,AACA;;;;;;;AACA,AACA,AACA;;;;;;;;;;;;;;;;;gDACA;;;;;4BACA,AACA;;;;;;;;;;6BACA;;;qBACA,AACA;;;;;;;AACA,AACA,AACA;;;;;;;;;;;;;;;;;gDACA;;;;;;0CACA;6BACA;uCACA;mCACA;oCACA,AACA;;;8BACA,AACA;;;;;;;;;AACA,AAEA,AACA;;;;uCACA;;6BACA;;;qBACA,AACA;;;;;;;AACA,AACA,AACA,AACA","file":"Base.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"content\">\n    <h1>动漫回忆录</h1>\n    <ul>\n      <li v-for=\"anime in animes\" :key=\"anime.get('id')\">\n        <h3>《{{ anime.get('title') }}》 观影年龄：{{ anime.get('age') }}</h3>\n\n        <i v-for=\"people in anime.get('peopleArr')\" :key=\"people.get('id')\">\n          「 {{ people.get('name') }} 」\n        </i>\n\n        <br v-if=\"anime.get('peopleArr')\" />\n        <span @click=\"updateAnime(anime)\">修改</span>\n        <span @click=\"removeAnime(anime)\">删除</span>\n        <span @click=\"addPeople(anime)\">添加人物</span>\n      </li>\n    </ul>\n    <div class=\"button\" @click=\"saveAnime\">添加动漫</div>\n  </div>\n</template>\n\n<script>\nimport AV from 'leancloud-storage'\n\nexport default {\n  name: 'Base',\n  data() {\n    return {\n      animes: [],\n    }\n  },\n  async mounted() {\n    this.getAnime()\n  },\n  methods: {\n    async getAnime() {\n      const query = new AV.Query('Anime')\n      query.include(['peopleArr'])\n      query.ascending('createdAt')\n      try {\n        this.animes = await query.find()\n      } catch (error) {\n        alert(error)\n      }\n    },\n    // 添加数据\n    async saveAnime() {\n      const Anime = AV.Object.extend('Anime')\n      const anime = new Anime()\n      const title = prompt('动漫名字？', '')\n      const age = prompt('观看年龄？', '')\n      anime.set('title', title)\n      anime.set('age', age)\n      await anime.save()\n      // 更新页面\n      this.getAnime()\n      alert('保存成功')\n    },\n    async updateAnime(anime) {\n      const title = prompt('动漫名字？', '')\n      const age = prompt('几岁看的？', '')\n      anime.set('title', title)\n      anime.set('age', age)\n      try {\n        await anime.save()\n        this.getAnime()\n        alert('保存成功')\n      } catch (error) {\n        alert(error)\n      }\n    },\n    async removeAnime(anime) {\n      if (!confirm('确定要删除吗？')) return\n      try {\n        await anime.destroy()\n        this.getAnime()\n      } catch (error) {\n        alert(error)\n      }\n    },\n    async addPeople(anime) {\n      const People = AV.Object.extend('People')\n      const people = new People()\n      const name = prompt('人物名字？', '')\n      people.set('name', name)\n      people.set('anime', anime)\n      try {\n        await people.save()\n      } catch (error) {\n        alert(error)\n      }\n\n      try {\n        anime.add('peopleArr', people)\n        await anime.save()\n        this.getAnime()\n      } catch (error) {\n        alert(error)\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\n.content {\n  padding: 30px;\n}\nh3 {\n  margin: 5px 0 5px 0;\n}\ni {\n  font-style: normal;\n}\nul {\n  padding-left: 0;\n}\nli {\n  list-style-type: none;\n  color: #42b983;\n  border-left: solid #42b983 3px;\n  padding-left: 10px;\n  line-height: 30px;\n}\nli span {\n  color: #42b983;\n  font-size: 13px;\n  margin-left: 10px;\n  padding: 5px;\n  border-radius: 3px;\n  border: solid #42b983 1px;\n  cursor: pointer;\n}\n.button {\n  color: #fff;\n  background: #42b983;\n  display: inline-block;\n  border-radius: 3px;\n  padding: 5px 15px 5px 15px;\n  cursor: pointer;\n}\n</style>\n\n// // 新建一个 ACL 实例 // var acl = new AV.ACL(); //\nacl.setPublicReadAccess(true); // acl.setWriteAccess(AV.User.current(), true);\n// // 将 ACL 实例赋予 anime 对象 // anime.setACL(acl);\n"]}]}